using statement merging
  1:	proc  0 (:init:) lab1_1.1.pml:27 (state 3)	[else]
Starting phil with pid 1
  2:	proc  0 (:init:) lab1_1.1.pml:27 (state 4)	[(run phil(i))]
Philosopher 0 is thinking
  3:	proc  1 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
  4:	proc  0 (:init:) lab1_1.1.pml:28 (state 5)	[i = (i+1)]
  5:	proc  0 (:init:) lab1_1.1.pml:27 (state 3)	[else]
Starting phil with pid 2
  6:	proc  0 (:init:) lab1_1.1.pml:27 (state 4)	[(run phil(i))]
Philosopher 1 is thinking
  7:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
  8:	proc  0 (:init:) lab1_1.1.pml:28 (state 5)	[i = (i+1)]
  9:	proc  0 (:init:) lab1_1.1.pml:27 (state 3)	[else]
Starting phil with pid 3
 10:	proc  0 (:init:) lab1_1.1.pml:27 (state 4)	[(run phil(i))]
Philosopher 2 is thinking
 11:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 12:	proc  0 (:init:) lab1_1.1.pml:28 (state 5)	[i = (i+1)]
 13:	proc  0 (:init:) lab1_1.1.pml:27 (state 3)	[else]
Starting phil with pid 4
 14:	proc  0 (:init:) lab1_1.1.pml:27 (state 4)	[(run phil(i))]
Philosopher 3 is thinking
 15:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 16:	proc  0 (:init:) lab1_1.1.pml:28 (state 5)	[i = (i+1)]
 17:	proc  0 (:init:) lab1_1.1.pml:26 (state 1)	[((i>=4))]
 18:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 18:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 19:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 19:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 19:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 20:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 21:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 22:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 23:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
 24:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 24:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 25:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 25:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
 25:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 3 is thinking
 26:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 27:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 27:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 28:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 29:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 30:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 31:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 31:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 31:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 32:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 33:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 34:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 35:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 3 is thinking
 36:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 37:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
 38:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 38:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 39:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 39:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 39:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 40:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 41:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 42:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 43:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
 44:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 44:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 45:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 45:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
 45:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 3 is thinking
 46:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
Philosopher 2 is thinking
 47:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 48:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 48:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 49:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 49:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 49:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 50:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 51:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 52:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 53:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
 54:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 54:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
Philosopher 3 is thinking
 55:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 56:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 56:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 57:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 58:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 59:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 60:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 60:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
 60:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 61:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 62:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 63:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 64:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 64:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 64:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 65:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 66:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 67:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 68:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 3 is thinking
 69:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 70:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
 71:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 72:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 72:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 73:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 73:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
 73:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 74:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 75:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 76:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 77:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
 78:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 78:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 79:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 79:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
 79:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 3 is thinking
 80:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 81:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 82:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 83:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
 84:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 85:	proc  1 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 85:	proc  1 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 86:	proc  1 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 86:	proc  1 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 0 is eating with fork 0 and 3
 86:	proc  1 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 87:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 88:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
 89:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 90:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 90:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 91:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 91:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
 91:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
 92:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 93:	proc  1 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
 94:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
 95:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
 96:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
 97:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
 98:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
 98:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
 99:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
 99:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
 99:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
100:	proc  1 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
101:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
102:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
103:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
104:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
105:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
106:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
106:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
107:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
107:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
108:	proc  1 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
109:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
109:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
109:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
110:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
111:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
112:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
113:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
113:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
113:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
114:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
115:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
116:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
117:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
118:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
119:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
120:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
121:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
121:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
122:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
122:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
122:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
123:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
124:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
125:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
126:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
127:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
127:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
128:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
128:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
128:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 2 is thinking
129:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
130:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
131:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
132:	proc  1 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 0 is thinking
133:	proc  1 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
134:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
134:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
135:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
135:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
135:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
136:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
137:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
138:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
139:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
140:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
140:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
Philosopher 3 is thinking
141:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
142:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
143:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
144:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
145:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
145:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
146:	proc  1 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
146:	proc  1 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
147:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
147:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
147:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
148:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
149:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
150:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
151:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
151:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
151:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
152:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
153:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
154:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
155:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 3 is thinking
156:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
157:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
158:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
159:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
159:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
160:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
160:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
160:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
161:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
162:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
163:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
164:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
165:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
165:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
Philosopher 3 is thinking
166:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
167:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
167:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
168:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
168:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
168:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
169:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
170:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
171:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
172:	proc  1 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
172:	proc  1 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 0 is eating with fork 0 and 3
172:	proc  1 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
173:	proc  1 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
174:	proc  1 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
175:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
176:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
176:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
177:	proc  1 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
178:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
178:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
178:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
179:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
180:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
181:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
182:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
182:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
182:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
183:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
184:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
185:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
186:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
187:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
188:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
189:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
190:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
190:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
191:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
191:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
191:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
192:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
193:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
194:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
195:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
196:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
196:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
197:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
197:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
197:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 2 is thinking
198:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
199:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
200:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
201:	proc  1 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
202:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
202:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
Philosopher 3 is thinking
203:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
204:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
204:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
205:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
206:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
206:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
206:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
207:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
208:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
209:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
210:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
210:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
210:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
211:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
212:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
213:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
214:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 3 is thinking
215:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
216:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
217:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
218:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
218:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
219:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
219:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
219:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
220:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
221:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
222:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
223:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
224:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
224:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
225:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
225:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
225:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
Philosopher 3 is thinking
226:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
227:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
228:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
229:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
230:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
231:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
231:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
232:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
233:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 2 is thinking
234:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
Philosopher 0 is thinking
235:	proc  1 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
236:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
236:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
237:	proc  2 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
237:	proc  2 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 1 is eating with fork 1 and 0
237:	proc  2 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
238:	proc  2 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
239:	proc  2 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
240:	proc  2 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
241:	proc  2 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
242:	proc  4 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
242:	proc  4 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 3 is eating with fork 3 and 2
242:	proc  4 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
243:	proc  4 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
244:	proc  4 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
245:	proc  4 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
246:	proc  4 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 3 is thinking
247:	proc  4 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
248:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
248:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
249:	proc  3 (phil) lab1_1.1.pml:10 (state 4)	[((fork[(((d+4)-1)%4)]==0))]
249:	proc  3 (phil) lab1_1.1.pml:11 (state 5)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]+1)]
Philosopher 2 is eating with fork 2 and 1
249:	proc  3 (phil) lab1_1.1.pml:13 (state 7)	[printf('Philosopher %d is eating with fork %d and %d\\n',d,d,(((d+4)-1)%4))]
250:	proc  4 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
250:	proc  4 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
251:	proc  3 (phil) lab1_1.1.pml:14 (state 8)	[assert((fork[d]<=1))]
252:	proc  3 (phil) lab1_1.1.pml:15 (state 9)	[assert((fork[(((d+4)-1)%4)]<=1))]
253:	proc  3 (phil) lab1_1.1.pml:17 (state 10)	[fork[d] = (fork[d]-1)]
254:	proc  3 (phil) lab1_1.1.pml:18 (state 11)	[fork[(((d+4)-1)%4)] = (fork[(((d+4)-1)%4)]-1)]
Philosopher 1 is thinking
255:	proc  2 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
256:	proc  1 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
256:	proc  1 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
Philosopher 2 is thinking
257:	proc  3 (phil) lab1_1.1.pml:6 (state 1)	[printf('Philosopher %d is thinking\\n',d)]
258:	proc  2 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
258:	proc  2 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
259:	proc  3 (phil) lab1_1.1.pml:8 (state 2)	[((fork[d]==0))]
259:	proc  3 (phil) lab1_1.1.pml:9 (state 3)	[fork[d] = (fork[d]+1)]
spin: trail ends after 259 steps
#processes: 5
259:	proc  4 (phil) lab1_1.1.pml:10 (state 4)
259:	proc  3 (phil) lab1_1.1.pml:10 (state 4)
259:	proc  2 (phil) lab1_1.1.pml:10 (state 4)
259:	proc  1 (phil) lab1_1.1.pml:10 (state 4)
259:	proc  0 (:init:) lab1_1.1.pml:30 (state 9)
5 processes created
Exit-Status 0