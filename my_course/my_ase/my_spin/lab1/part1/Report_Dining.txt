Q1. Use assertions in your code to verify this property about forks.
Answer: 
In my file Dining_1.pml, I use assertions to verfify the property that a fork can not be grabed by 2 philosoher at the same time as follows:
    assert(fork[id] <= 1);
    assert(fork[(id+1)%NUM_PHIL]);

Q2.
(a). Does your model have deadlocks? If yes, use SPIN to derive a counter example showing a
problematic trace. Modify your solution to eliminate deadlocks.
Answer: 
1. Yes, deadlocks could be found in my model, invalid end state is raised when I run a verfier pan. Finally, all philosophers are blocked waiting to fetch the left fork. As a consequence, no body can get the left fork without releasing the right.
2. Dining_1_trail_output.txt shows the counter example.
3. Dining_2.pml is my solution to eliminate deadlocks. As it's shown, I use "fork[id] == 0 && fork[(id+1)%NUM_PHIL] == 0" in a atomic block to make sure that the philosopher could only fetch the fork only if two fork near him are both avalable.

(b). Verify absence of deadlocks in your model using SPIN.
Answer: Dining_2_output.txt is the result of verifying Dining_2.pml. We can see that there is 0 error, so there is no deadlocks in my model.  

Q3. Verify property (1) with an LTL formula instead of assertions.
Answer: Instead of using assertions, my LTL formula is as follow: 
    ltl {[](fork[0]<=1 && fork[1]<=1 && fork[2]<=1 && fork[3]<=1 && fork[4]<=1)}
Dining_3.pml is for this question and verfication result is mark down in Dining_3_output.txt.
